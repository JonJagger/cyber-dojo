
<div class="dialog" data-width="750" data-height="600">
  <table>
    <tr>
      <td class="panel">
          cyber-dojo is designed to encourage <em>team practice</em> 
          and works well with two (or more) people at each 
          computer, periodically rotating the current keyboard
          drivers to <em>different</em> computers as navigators.
      </td>
    </tr>
    
    <tr>
      <td class="panel">
          Do a diff-review after each practice via the dashboard.<br/>
          Look for evidence of...<br/>
          
          <% width=10 %>
          <% height=width*3 %>
          &nbsp;&nbsp;
            <%= traffic_light_image('red',width,height) %>
            <%= traffic_light_image('green',width,height) %>
            starting with a failing test<br/>
          
          &nbsp;&nbsp;
            <%= traffic_light_image('green',width,height) %>          
            <%= traffic_light_image('green',width,height) %>          
            <%= traffic_light_image('green',width,height) %>          
            refactoring<br/>        
          
          &nbsp;&nbsp;
            <%= traffic_light_image('amber',width,height) %>                    
            <%= traffic_light_image('amber',width,height) %>                    
            <%= traffic_light_image('amber',width,height) %>                    
            <%= traffic_light_image('amber',width,height) %>                    
            overly ambitious steps<br/>        
      </td>
    </tr>
  
    <tr>
      <td class="panel">
          Practice refactoring. How about...<br/>
          &nbsp;&nbsp;&bull; the <a href="http://jonjagger.blogspot.co.uk/2012/05/yahtzee-cyber-dojo-refactoring-in-java.html">Yahtzee kata</a> in C#, C++, Java, Python <br/>
          &nbsp;&nbsp;&bull; the <a href="http://coding-is-like-cooking.info/2013/01/setting-up-a-new-code-kata-in-cyber-dojo/">Tennis kata</a> in C#, C++, Java, Python, Ruby 
      </td>
    </tr>
  
    <tr>
      <td class="panel">
          When everyone is at green set a challenge to either<br/>
          &nbsp;&nbsp;&bull; find some code you can delete and the tests still all pass!<br/>
          &nbsp;&nbsp;&bull; find a bug, and write a failing test for it
      </td>
    </tr>
  
    <tr>
      <td class="panel">
          Here's some more variations...<br/>
          &nbsp;&nbsp;&bull; Do a practice with no line numbers<br/>
          &nbsp;&nbsp;&bull; Fork a new practice with all the tests, but none of the code<br/>
          &nbsp;&nbsp;&bull; Fork a new practice with all the code, but none of the tests<br/>
          &nbsp;&nbsp;&bull; Finish the practice using at most three amber traffic-lights<br/>
          &nbsp;&nbsp;&bull; Create a practice with a specific fault - which pair can fix it first<br/>
      </td>
    </tr>
    
    <tr>
      <td class="panel">
          If your team regularly pair-programs and you're looking
          to hire some new developers, why not mirror the pairing
          in your recruitment process? See how five candiates fare
          technically (and socially) in a cyber-dojo. Pair each one
          with a developer from the team they're hoping to join.
          Do five iterations swapping partners each time.
      </td>
    </tr>
  
    <tr>
      <td class="panel">
          Play the 
          <a href="http://jonjagger.blogspot.com/2009/06/average-time-to-green-game.html" 
             target="_blank">
          average-time-to-green-game</a>.
      </td>
    </tr>
  
    <tr>
      <td class="panel">
          <%= t('views.tips.think_about_improving_not_finishing') %>.
      </td>
    </tr>
    
  </table>
</div>
